# main.py
# Punto de entrada principal. Orquesta el pipeline COMPLETO:
# B√∫squeda de fuentes -> An√°lisis -> Guardado de fuentes ->
# Generaci√≥n de contenido -> B√∫squeda de im√°genes -> Guardado de contenido generado y im√°genes ->
# Marcado de fuentes usadas -> Simulaci√≥n de publicaci√≥n.

import content_generator
# Importamos los m√≥dulos necesarios
import database
import mock_publisher
import scraper
import web_tools

# analyzer y llm_client son usados internamente por otros m√≥dulos

if __name__ == "__main__":
    print("--- Iniciando Asistente de Contenido Inteligente (ACI) - Proceso Completo ---")

    # Inicializar la base de datos
    try:
        database.inicializar_db()
        print("‚úÖ Base de datos lista.")
    except Exception as e:
        print(f"‚ùå Error CR√çTICO al inicializar la base de datos: {e}")
        print("Aseg√∫rate de que 'schema.sql' existe en la ruta especificada en 'database.py' y que no hay errores en el script SQL.")
        exit(1)

    # Definir los temas para procesar
    temas_a_procesar = [ "ultimas novedades en astronomia 2025"]


    # --- Procesar cada tema ---
    for tema_actual in temas_a_procesar:
        print(f"\n--- Procesando pipeline COMPLETO para el tema: '{tema_actual}' ---")

        # =====================================================================
        # --- FASE 1: Buscar, Analizar y Guardar Fuentes ---
        # =====================================================================
        print(f"\n--- Fase 1: B√∫squeda y An√°lisis de Fuentes para '{tema_actual}' ---")

        # Par√°metros para Fase 1 (pueden venir de configuraci√≥n por tema despu√©s)
        # TODO: Cargar configuraci√≥n para tema_actual y usar estos valores desde config
        num_noticias_buscar = 10 # Cu√°ntas URLs iniciales buscar en DDG
        # scraper.buscar_noticias internamente analiza con score 5 y retorna TOP N
        # num_resultados_analizar_y_guardar = 5 # Cu√°ntas de las analizadas con score >= 5 se guardan


        resultados_analisis_scraping = scraper.buscar_noticias(
            tema_actual,
            num_noticias=num_noticias_buscar
            # scraper.buscar_noticias ya tiene un parametro num_noticias por defecto,
            # y filtra/retorna un numero limitado de resultados analizados.
            # Si queremos controlar el numero de resultados analizados retornados,
            # scraper.buscar_noticias necesita un argumento adicional para eso.
            # Por ahora, asumimos que num_noticias=10 y el filtro interno de scraper
            # (ej:[:5]) es suficiente para la fase 1.
        )

        if not resultados_analisis_scraping:
            print(f"‚ö†Ô∏è No se encontraron nuevos art√≠culos fuente relevantes (score >= 5) para '{tema_actual}' en esta ejecuci√≥n de Fase 1.")
            print("Continuando a Fase 2 para ver si hay fuentes antiguas utilizables...")
        else:
             print(f"\nüèÜ TOP {len(resultados_analisis_scraping)} resultados analizados con Score >= 5 (se intentar√°n guardar como fuentes):")
             for i, art in enumerate(resultados_analisis_scraping, 1):
                 print(f"\n{i}. ‚≠ê {art.get('score', 'N/A')}/10: {art.get('reason', 'Sin raz√≥n')[:100]}...")
                 print(f"   üîó {art.get('url', 'Sin URL')[:60]}...")
                 articulo_db_source_data = {
                     'titulo': art.get('titulo', f"Art√≠culo sobre {tema_actual}"),
                     'url': art.get('url', 'Sin URL'),
                     'score': art.get('score', 0),
                     'resumen': art.get('resumen', art.get('reason', '')),
                     'fuente': art.get('url', '').split('/')[2] if art.get('url') else '',
                     'tags': art.get('tags', [])
                 }
                 try:
                     source_id_saved = database.guardar_articulo(articulo_db_source_data)
                     if source_id_saved:
                         print(f"   - Guardado/Actualizado como fuente en DB con ID {source_id_saved}.")
                     else:
                          print(f"   - ‚ö†Ô∏è Fall√≥ el guardado o no se pudo obtener ID para fuente: {articulo_db_source_data.get('url', 'N/A')}")
                 except Exception as e:
                     print(f"‚ö†Ô∏è Fall√≥ el guardado del art√≠culo fuente {articulo_db_source_data.get('url', 'N/A')}: {str(e)}")
                     pass


        print(f"\n‚úÖ Fase 1 completada para '{tema_actual}'. Fuentes investigadas y guardadas.")


        # =====================================================================
        # --- FASE 2: Generaci√≥n de Contenido, Im√°genes y Guardado Final ---
        # =====================================================================
        print(f"\n--- Fase 2: Generaci√≥n de Contenido para '{tema_actual}' ---")

        # Par√°metros para Fase 2 (pueden venir de configuraci√≥n por tema despu√©s)
        # TODO: Cargar configuraci√≥n para tema_actual y usar estos valores desde config
        num_fuentes_para_usar_generador = 3 # Cu√°ntas fuentes intentar usar para la generaci√≥n
        min_score_fuentes_para_usar = 7   # Score m√≠nimo para que una fuente sea considerada por el generador
        num_imagenes_buscar = 2           # Cu√°ntas im√°genes candidatas buscar
        # TODO: Pasar par√°metros de longitud, tono, plantillas de prompt a generate_seo_content


        # 1. Llamar al Generador de Contenido
        try:
            print(f"üß† Intentando generar art√≠culo sobre '{tema_actual}' usando {num_fuentes_para_usar_generador} fuentes con score >= {min_score_fuentes_para_usar}...")
            # content_generator.generate_seo_content internamente buscar√° las fuentes relevantes y no usadas.
            # Pasa los par√°metros necesarios.
            generated_article_data = content_generator.generate_seo_content(
                topic=tema_actual,
                num_sources=num_fuentes_para_usar_generador,
                min_score=min_score_fuentes_para_usar
                # TODO: Pasar argumentos adicionales (longitud, tono, prompts) aqu√≠
            )

            # --- Check si la generaci√≥n fue exitosa ---
            if generated_article_data:
                print(f"\nüéâ Art√≠culo generado exitosamente para '{tema_actual}'.")
                # generate_seo_content ya a√±adi√≥ 'tema', 'score_fuentes_promedio', 'fuente_ids_usadas'

                # 2. Guardar el art√≠culo generado en la DB (tabla articulos_generados)
                print("üíæ Intentando guardar art√≠culo generado en DB...") # Debug print
                generated_article_id = None # Inicializar a None
                try:
                    generated_article_id = database.save_generated_article(generated_article_data)
                    if generated_article_id:
                        print(f"‚úÖ Art√≠culo generado guardado en DB con ID {generated_article_id}.")
                    else:
                         # save_generated_article solo retorna None si hay un error capturado internamente
                         print(f"‚ùå save_generated_article retorn√≥ None para tema '{tema_actual}'. Esto indica un fallo interno en la funci√≥n.")
                         # Si falla el guardado del generado, no podemos asociar im√°genes ni marcar fuentes, ni publicar
                         generated_article_data = None # Invalidar generated_article_data para saltar fases posteriores
                         # No levantar excepci√≥n aqu√≠, el print anterior ya informa

                except Exception as e:
                    # Este catch es si save_generated_article LANZA una excepci√≥n
                    print(f"‚ùå ERROR al guardar art√≠culo generado en DB para tema '{tema_actual}': {str(e)}")
                    # Si falla el guardado, no podemos asociar im√°genes ni marcar fuentes, ni publicar
                    generated_article_data = None # Invalidar generated_article_data para saltar fases posteriores
                    # No levantar excepci√≥n aqu√≠, el print anterior ya informa


                # --- Continuar solo si el art√≠culo generado se guard√≥ con √©xito ---
                if generated_article_data: # Verifica de nuevo si sigue siendo v√°lido (no None por los fallos anteriores)
                     print("‚úÖ Art√≠culo generado guardado correctamente. Procediendo con im√°genes y marcado de fuentes...") # Debug print

                     # 3. Buscar Im√°genes para el Art√≠culo Generado
                     print(f"\nüñºÔ∏è Buscando {num_imagenes_buscar} im√°genes relacionadas...")
                     image_search_query = generated_article_data.get('title', tema_actual)
                     tags_list = generated_article_data.get('tags', [])
                     if isinstance(tags_list, list) and tags_list:
                         image_search_query += " " + " ".join(tags_list)
                     image_search_query = image_search_query[:150].strip()

                     print(f"   - Query para b√∫squeda de im√°genes: '{image_search_query[:80]}...'")

                     try:
                         found_images_metadata = web_tools.find_free_images(image_search_query, num_results=num_imagenes_buscar)

                         # 4. Guardar la metadata de las im√°genes encontradas en la DB
                         if found_images_metadata:
                              print(f"üíæ Guardando metadata de {len(found_images_metadata)} im√°genes encontradas en DB...")
                              # Necesitamos el generated_article_id que obtuvimos antes
                              if generated_article_id is not None:
                                  for img_meta in found_images_metadata:
                                      img_meta['articulo_generado_id'] = generated_article_id
                                      try:
                                          database.save_image_metadata(img_meta)
                                      except Exception as e:
                                          print(f"‚ö†Ô∏è Fall√≥ el guardado de metadata de una imagen para articulo ID {generated_article_id}: {str(e)}")
                                          pass # Contin√∫a

                                  print("‚úÖ Metadata de im√°genes guardada.")
                              else:
                                   print("‚ö†Ô∏è No se pudo obtener generated_article_id. No se guardar√° metadata de im√°genes.")

                         else:
                             print("‚ö†Ô∏è No se encontraron im√°genes adecuadas para guardar.")

                     except Exception as e:
                          print(f"‚ùå ERROR durante b√∫squeda o guardado de im√°genes para tema '{tema_actual}': {str(e)}")
                          pass # Contin√∫a


                     # 5. Marcar las fuentes utilizadas como 'usada_para_generar = 1'
                     print("\nüîÑ Intentando marcar fuentes utilizadas como usadas...") # Debug print
                     try:
                         source_ids_actually_used = generated_article_data.get('fuente_ids_usadas', [])
                         if source_ids_actually_used:
                             print(f"‚úÖ Marcando {len(source_ids_actually_used)} fuentes utilizadas como usadas...")
                             for source_article_id in source_ids_actually_used:
                                 database.mark_source_used(source_article_id)
                             print("‚úÖ Fuentes marcadas como usadas.")
                         else:
                              print("‚ö†Ô∏è No se pudo obtener la lista de IDs de fuentes utilizadas del art√≠culo generado. No se marcar√° ninguna como usada.")
                     except Exception as e:
                          print(f"‚ùå ERROR al marcar fuentes utilizadas para tema '{tema_actual}': {str(e)}")
                          pass # Contin√∫a


                     # 6. Simular Publicaci√≥n (Generar HTML para previsualizaci√≥n)
                     print("\nüöÄ Simulando Publicaci√≥n (Generando archivo HTML)...") # Debug print
                     try:
                         # Necesitamos los datos completos del art√≠culo generado para el publisher
                         # generated_article_data ya los tiene (excepto las im√°genes guardadas, pero mock_publisher acepta la lista temporal)
                         mock_publisher.publish_to_html(generated_article_data, image_data=found_images_metadata)
                         print("‚úÖ Simulaci√≥n de publicaci√≥n completada.")
                     except Exception as e:
                          print(f"‚ùå ERROR al simular publicaci√≥n (generar HTML) para tema '{tema_actual}': {str(e)}")
                          pass # Contin√∫a si hay m√°s temas


                else: # Si generated_article_data se volvio None por un fallo en el guardado
                    print("‚è© Saltando b√∫squeda de im√°genes, marcado de fuentes y publicaci√≥n simulada debido a un fallo anterior.")


            else: # Si content_generator.generate_seo_content devolvi√≥ None
                print(f"‚ùå La generaci√≥n de contenido para '{tema_actual}' fall√≥ (generate_seo_content retorn√≥ None). Saltando fases posteriores.")
                # content_generator.py ya habr√° impreso los detalles del error

        except Exception as e: # Captura errores generales durante la llamada a generate_seo_content
            print(f"‚ùå ERROR general durante la fase de generaci√≥n para '{tema_actual}': {str(e)}")
            pass # Contin√∫a al siguiente tema

        print(f"\n--- Pipeline COMPLETO para '{tema_actual}' finalizado. ---")
        print("-" * 40)


    print("\n‚úÖ Proceso principal completo (Pipeline de generaci√≥n ejecutado para todos los temas).")