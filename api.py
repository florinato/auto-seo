# api.py
# Backend API para el Asistente de Contenido Inteligente (SEO-Copilot).
# Expone endpoints para disparar la generaci√≥n completa, gestionar configuraci√≥n,
# listar y obtener art√≠culos/fuentes.
# **Versi√≥n simplificada sin manejo de errores detallado y con importaciones directas para hackathon.**

import json
import os
from contextlib import asynccontextmanager
from typing import Any, Dict, List, Optional

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware

import refactorizado.database as database
from refactorizado.content_generator import generate_seo_content
from refactorizado.mock_publisher import publish_to_html
from refactorizado.scraper import buscar_noticias
from refactorizado.web_tools import find_free_images

print(">>> API: M√≥dulos importados directamente <<<")


# --- Lifespan para inicializar la DB al inicio de la aplicaci√≥n ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Funci√≥n de ciclo de vida para inicializar recursos al iniciar la aplicaci√≥n FastAPI.
    Inicializa la base de datos. Si falla, la aplicaci√≥n se romper√° aqu√≠ al inicio.
    """
    print("üåê Iniciando API: Ejecutando lifespan startup event...")
    # Inicializar la base de datos. Si falla, la aplicaci√≥n se romper√° aqu√≠ al inicio.
    database.inicializar_db()
    print("‚úÖ Base de datos inicializada.")

    yield # La aplicaci√≥n correr√° hasta que la funci√≥n lifespan retorne

    # C√≥digo para ejecutar al cerrar la aplicaci√≥n (opcional)
    print("Shutting down API...")


# --- Inicializar FastAPI con lifespan ---
app = FastAPI(
    title="SEO-Copilot API",
    description="Backend API para el Asistente de Contenido Inteligente (SEO-Copilot).",
    version="0.1.0",
    lifespan=lifespan # Asociar el lifespan con la aplicaci√≥n
)

# --- Configurar CORS ---
origins = ["*"]  # Permitir todos los or√≠genes para la hackathon. Ajustar en producci√≥n.
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],  # Permitir GET, POST, PUT, DELETE, etc.
    allow_headers=["*"],  # Permitir cualquier header
)


# --- Endpoint Ra√≠z ---
@app.get("/")
async def read_root():
    """
    Endpoint ra√≠z que retorna un mensaje de bienvenida y enlace a docs.
    """
    print(">>> API: Recibida solicitud GET /")
    return {"message": "SEO-Copilot API is running", "docs_url": "/docs"}


# --- POST /generate ---
@app.post("/generate")
async def generate_article_endpoint(request: Request):
    """
    Inicia el pipeline completo de generaci√≥n de contenido para un tema/secci√≥n.
    Busca fuentes, analiza, genera texto, busca im√°genes, guarda todo en DB, marca fuentes.
    **Simplificado: Si falla, se romper√°.**
    """
    print("\n>>> API: Recibida solicitud POST /generate <<<")
    request_data: Dict[str, Any] = await request.json()

    # Validar la entrada manualmente
    tema = request_data.get('tema')
    if not isinstance(tema, str) or not tema:
        print(">>> API: Error de validaci√≥n en POST /generate: 'tema' inv√°lido o faltante")
        raise HTTPException(status_code=400, detail="Invalid input: 'tema' must be a non-empty string")

    print(f">>> API: Generando art√≠culo para el tema: '{tema}'")

    generated_article_id = None # Para almacenar el ID del art√≠culo generado
    generated_article_data = None # Asegurar que est√° definido

    # --- Obtener configuraci√≥n para el tema (guardada o por defecto) ---
    # get_config retorna {} si no encuentra config guardada. Los m√≥dulos deben manejar defaults.
    # Si falla database.get_config, se romper√° aqu√≠.
    config = database.get_config(tema)
    print(f">>> API: Configuraci√≥n para '{tema}' cargada (encontrada en DB: {bool(config)}).")

    # --- Fase 1: Buscar, Analizar, Guardar Fuentes ---
    print("\n   >>> API: Iniciando Fase 1: B√∫squeda y An√°lisis de Fuentes...")
    # Llamar a scraper.buscar_noticias solo con el tema. Asumir que carga su propia config/defaults.
    # Si falla scraper.buscar_noticias o analyzer o llm_client, se romper√° aqu√≠.
    fuentes_analizadas = buscar_noticias(tema) # <-- Llamada asumiendo firma actual

    if fuentes_analizadas:
        print(f"   ‚úÖ Fase 1: Encontradas {len(fuentes_analizadas)} fuentes analizadas. Guardando fuentes...")
        for fuente_meta in fuentes_analizadas:
            # Guardar fuentes encontradas. Si database.guardar_articulo falla, se romper√° aqu√≠.
            database.guardar_articulo(fuente_meta) # guardar_articulo ya maneja duplicados
    else:
         print("   ‚ö†Ô∏è Fase 1: No se encontraron fuentes analizadas con score >= 5 o hubo errores en el scraper.")


    # --- Fase 2: Generaci√≥n de Contenido y Post-procesamiento ---
    print("\n   >>> API: Iniciando Fase 2: Generaci√≥n de Contenido...")
    # Llamar a content_generator.generate_seo_content solo con el tema/topic.
    # Asumir que carga su propia config/defaults (longitud, tono, prompts).
    # Si falla content_generator.generate_seo_content, se romper√° aqu√≠.
    generated_article_data = generate_seo_content(tema) # <-- Llamada asumiendo firma actual

    # --- Verificar si la generaci√≥n de texto fue exitosa ---
    if generated_article_data:
        print("   ‚úÖ Fase 2: Art√≠culo generado por IA.")
        # Asegurarse de que 'tema' est√° correctamente en los datos del art√≠culo antes de guardar
        if 'tema' not in generated_article_data or not generated_article_data['tema']:
            generated_article_data['tema'] = tema # A√±adir tema si falta
            print(f"   ‚ö†Ô∏è Campo 'tema' faltante o vac√≠o en datos generados. A√±adiendo '{tema}'.")


        # Guardar art√≠culo generado en DB. Si database.save_generated_article falla, se romper√° aqu√≠.
        print("   üíæ Intentando guardar art√≠culo generado en DB...")
        # save_generated_article retorna el ID o None. Si retorna None, la siguiente condici√≥n fallar√°.
        generated_article_id = database.save_generated_article(generated_article_data) # Save generated article FIRST to get ID

        # --- Continuar solo si el art√≠culo generado se guard√≥ con √©xito (ID v√°lido) ---
        if generated_article_id:
             print(f"   ‚úÖ Art√≠culo generado guardado con ID {generated_article_id}.")

             # Buscar y guardar im√°genes. Si falla web_tools.find_free_images o database.save_image_metadata, se romper√° aqu√≠.
             # num_results debe venir de config o defaults. Asumimos web_tools lo maneja o usamos default aqu√≠
             num_imagenes_buscar = config.get('num_imagenes_buscar', 2) # Usar num_imagenes_buscar de la config cargada o default si config es {}
             print(f"\n   üñºÔ∏è Buscando y guardando im√°genes ({num_imagenes_buscar})...")

             image_search_query = generated_article_data.get('title', tema)
             tags_list = generated_article_data.get('tags', [])
             if isinstance(tags_list, list) and tags_list:
                 image_search_query += " " + " ".join(tags_list)
             image_search_query = image_search_query[:150].strip()

             imagenes_encontradas = find_free_images(image_search_query, num_results=num_imagenes_buscar) # <-- Llamada con num_results

             if imagenes_encontradas:
                  print(f"   üíæ Guardando metadata de {len(imagenes_encontradas)} im√°genes encontradas en DB...")
                  # Verificar de nuevo si el ID generado es v√°lido antes de asociar im√°genes
                  # Esta verificaci√≥n es un poco redundante aqu√≠ porque ya estamos dentro del `if generated_article_id:`
                  # Pero la mantengo por si acaso la funci√≥n save_generated_article tiene un comportamiento inesperado.
                  if generated_article_id is not None:
                      for img_meta in imagenes_encontradas:
                          # save_image_metadata espera 'articulo_generado_id' en el diccionario
                          img_meta['articulo_generado_id'] = generated_article_id
                          database.save_image_metadata(img_meta) # Si falla, se romper√° aqu√≠.
                  else:
                       print("   ‚ö†Ô∏è No se pudo obtener generated_article_id. No se guardar√° metadata de im√°genes.")


             # Marcar fuentes utilizadas. Si database.mark_source_used falla, se romper√° aqu√≠.
             print("\n   üîÑ Marcando fuentes utilizadas como usadas...")
             # Asumiendo generate_seo_content a√±ade 'fuente_ids_usadas' a los datos retornados
             source_ids_actually_used = generated_article_data.get('fuente_ids_usadas', [])
             if source_ids_actually_used:
                 for source_id in source_ids_actually_used:
                     database.mark_source_used(source_id) # Si falla, se romper√° aqu√≠.
                 print(f"   ‚úÖ {len(source_ids_actually_used)} fuentes marcadas como usadas.")
             else:
                  print("   ‚ö†Ô∏è No se obtuvieron IDs de fuentes utilizadas del art√≠culo generado. No se marcar√° ninguna como usada.")


             # Simular Publicaci√≥n (Generar HTML para previsualizaci√≥n). Si mock_publisher.publish_to_html falla, se romper√° aqu√≠.
             print("\n   üöÄ Llamando a mock_publisher (HTML local)...")
             # Mock publisher needs article_data and images data
             # Usamos la lista de im√°genes encontradas (metadata)
             publish_to_html(generated_article_data, image_data=imagenes_encontradas)
             print("   ‚úÖ mock_publisher llamado.")


        else: # Si database.save_generated_article retorn√≥ None
            print(f"‚ùå Fall√≥ el guardado del art√≠culo generado en la base de datos para tema '{tema}'. Pipeline detenido.")
            # Lanzamos una excepci√≥n para que el frontend sepa que algo sali√≥ mal
            raise HTTPException(status_code=500, detail=f"Failed to save generated article for theme '{tema}'")


    else: # Si content_generator.generate_seo_content devolvi√≥ None
        print(f"‚ùå La generaci√≥n de contenido (texto) fall√≥ para tema '{tema}'. Pipeline detenido.")
        # Lanzamos una excepci√≥n para que el frontend sepa que algo sali√≥ mal
        raise HTTPException(status_code=500, detail=f"Content generation failed for theme '{tema}'")


    print(f"\n>>> API: Pipeline COMPLETO para '{tema}' finalizado exitosamente. Art√≠culo ID: {generated_article_id} <<<")
    # Retornar el ID del art√≠culo generado para que el frontend pueda cargarlo en el Canvas
    return {"message": "Generation pipeline completed successfully", "article_id": generated_article_id}


# --- GET /config/{tema} ---
@app.get("/config/{tema}")
async def get_config_endpoint(tema: str):
    """
    Endpoint para obtener la configuraci√≥n guardada o por defecto para un tema.
    """
    if not isinstance(tema, str) or not tema:
        raise HTTPException(status_code=400, detail="Invalid path parameter: 'tema' must be a non-empty string")
    print(f"\n>>> API: Recibida solicitud GET /config/{tema} para tema: '{tema}' <<<")
    config = database.get_config(tema) # get_config retorna {} si no encuentra. Si falla, se romper√°.
    print(f"‚úÖ API: Retornando configuraci√≥n para tema '{tema}'. Encontrada en DB: {bool(config)}")
    return config # Retorna el dict encontrado o {}


# --- PUT /config ---
@app.put("/config")
async def update_config_endpoint(request: Request):
    """
    Endpoint para guardar o actualizar la configuraci√≥n para un tema.
    Payload debe ser un diccionario con campos de configuraci√≥n e incluir 'tema'.
    **Simplificado: Si falla, se romper√°.**
    """
    print("\n>>> API: Recibida solicitud PUT /config <<<")
    config_data: Dict[str, Any] = await request.json()

    # Validar la entrada manualmente
    tema = config_data.get('tema')
    if not isinstance(tema, str) or not tema:
        print(">>> API: Error de validaci√≥n en PUT /config: 'tema' inv√°lido o faltante en payload")
        raise HTTPException(status_code=400, detail="Invalid input: 'tema' must be a non-empty string in payload")

    print(f">>> API: Recibida solicitud para guardar configuraci√≥n para tema: '{tema}' <<<")
    # Llamar a database.save_config directamente con el dict recibido. Si falla, se romper√°.
    database.save_config(config_data) # database.save_config ya valida campos v√°lidos y tema
    print(f"‚úÖ API: Configuraci√≥n para '{tema}' guardada con √©xito.")
    return {"message": "Configuration saved successfully"}


# --- GET /articles ---
@app.get("/articles")
async def list_articles_endpoint(tema: Optional[str] = None, estado: Optional[str] = None):
    """
    Endpoint para obtener todos los art√≠culos generados, opcionalmente filtrados por tema o estado.
    """
    print(f"\n>>> API: Recibida solicitud GET /articles (Tema: {tema}, Estado: {estado}) <<<")
    # database.get_all_generated_articles ya acepta tema y estado como Optional. Si falla, se romper√°.
    articles = database.get_all_generated_articles(tema=tema, estado=estado)
    print(f"‚úÖ API: Retornando {len(articles)} art√≠culos generados.")
    return articles


# --- GET /articles/{article_id} ---
@app.get("/articles/{article_id}")
async def get_article_endpoint(article_id: int):
    """
    Endpoint para obtener detalles completos de un art√≠culo generado, incluyendo im√°genes asociadas.
    """
    print(f"\n>>> API: Recibida solicitud GET /articles/{article_id} <<<")
    # database.get_generated_article_by_id retorna dict o None. Si falla, se romper√°.
    article = database.get_generated_article_by_id(article_id)
    if article:
        print(f"‚úÖ API: Retornando detalles para art√≠culo ID {article_id}.")
        # database.get_generated_article_by_id ya deber√≠a convertir tags a lista
        return article
    else:
        print(f">>> API: Art√≠culo con ID {article_id} no encontrado.")
        raise HTTPException(status_code=404, detail="Article not found")


# --- PUT /articles/{article_id} ---
@app.put("/articles/{article_id}")
async def update_article_endpoint(article_id: int, request: Request):
    """
    Endpoint para actualizar campos de un art√≠culo generado (t√≠tulo, meta, body, tags, estado).
    Payload debe ser un diccionario con los campos a actualizar.
    **Simplificado: Si falla, se romper√°.**
    """
    print(f"\n>>> API: Recibida solicitud PUT /articles/{article_id} <<<")
    updated_data: Dict[str, Any] = await request.json()

    # Validar la entrada manualmente
    if not isinstance(updated_data, dict) or not updated_data:
        print(f">>> API: Error de validaci√≥n en PUT /articles/{article_id}: datos de actualizaci√≥n inv√°lidos o vac√≠os")
        raise HTTPException(status_code=400, detail="Invalid input: request body must be a non-empty dictionary")

    # database.update_generated_article ya maneja la conversion de tags si se le pasa lista.
    # database.update_generated_article ya valida los campos permitidos y el ID. Si falla, se romper√°.
    print(f">>> API: Actualizando art√≠culo ID {article_id} con campos: {list(updated_data.keys())}")
    success = database.update_generated_article(article_id, updated_data)

    if success:
        print(f"‚úÖ API: Art√≠culo ID {article_id} actualizado con √©xito.")
        return {"message": "Article updated successfully"}
    else:
        # Si database.update_generated_article retorna False (ej: ID no encontrado o fallo DB)
        print(f">>> API: Fall√≥ al actualizar el art√≠culo con ID {article_id}. database.update_generated_article retorn√≥ False.")
        # En una versi√≥n robusta, verificar si el art√≠culo existe primero para dar 404 si no.
        # Aqu√≠, asumimos que False para un ID v√°lido significa un error DB o validaci√≥n interna fallida.
        raise HTTPException(status_code=500, detail=f"Failed to update article with ID {article_id}")


# --- POST /chat ---
# Este endpoint existe pero su l√≥gica de Copiloto est√° marcada como TODO
# No hay manejo de errores detallado dentro de la l√≥gica mock.
@app.post("/chat")
async def chat_with_copilot_endpoint(request: Request):
    """
    Endpoint para interactuar con el SEO-Copilot conversacional.
    L√≥gica de Copiloto es TODO.
    **Simplificado: Si falla el parsing JSON, se romper√°. L√≥gica interna es mock.**
    """
    print("\n>>> API: Recibida solicitud POST /chat <<<")
    chat_request_data: Dict[str, Any] = await request.json()

    # Validar la entrada manualmente (mensaje y contexto)
    user_message = chat_request_data.get('user_message')
    article_id = chat_request_data.get('article_id')
    tema = chat_request_data.get('tema')

    if not isinstance(user_message, str) or not user_message:
         print(">>> API: Error de validaci√≥n en POST /chat: 'user_message' inv√°lido o faltante")
         raise HTTPException(status_code=400, detail="Invalid input: 'user_message' must be a non-empty string")
    # Requiere article_id O un tema v√°lido para contexto
    if article_id is None and (not isinstance(tema, str) or not tema):
        print(">>> API: Error de validaci√≥n en POST /chat: se requiere 'article_id' o 'tema' v√°lido para contexto")
        raise HTTPException(status_code=400, detail="Invalid input: must provide either 'article_id' or a non-empty 'tema' for context.")

    print(f">>> API: Mensaje de chat recibido para contexto (ArtID: {article_id}, Tema: {tema}): '{user_message}'")

    # --- TODO: Implementar la l√≥gica real del Copiloto en copilot.py ---
    # Cargar contexto completo (articulo, config) y llamar a copilot.process_chat_message
    # Por ahora, simplemente retornamos una respuesta mock.
    copilot_response_text = "SEO-Copilot (mock) recibi√≥ tu mensaje. La l√≥gica real se implementar√° pronto."
    if article_id is not None:
         copilot_response_text += f" Contexto: Art√≠culo ID {article_id}."
    elif tema:
         copilot_response_text += f" Contexto: Tema '{tema}'."
    copilot_response_text += f" Mensaje: '{user_message}'"
    # --- Fin respuesta mock ---

    print(f"‚úÖ API: Retornando respuesta mock del chat: '{copilot_response_text[:100]}...'")
    return {"response": copilot_response_text}


# --- GET /admin/sources ---
@app.get("/admin/sources")
async def list_sources_endpoint():
    """
    Endpoint para obtener todos los art√≠culos fuente scrapeados.
    """
    print("\n>>> API: Recibida solicitud GET /admin/sources <<<")
    # database.get_all_sources() asumiendo que acepta 0 args
    sources = database.et_all_sources()
    print(f"‚úÖ API: Retornando {len(sources)} fuentes.")
    return sources


# --- GET /temas-secciones ---
@app.get("/temas-secciones")
async def list_temas_secciones_endpoint():
    """
    Endpoint para obtener los temas/secciones disponibles (con configuraci√≥n guardada).
    """
    print("\n>>> API: Recibida solicitud GET /temas-secciones <<<")
    # database.get_available_temas_secciones() asumiendo que acepta 0 args
    temas = database.get_available_temas_secciones()
    print(f"‚úÖ API: Retornando {len(temas)} temas/secciones con configuraci√≥n.")
    return temas

# TODO: A√±adir otros endpoints si son necesarios (ej: eliminar art√≠culo/fuente, etc.)
